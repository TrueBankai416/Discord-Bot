# This configuration block is used to map the $http_upgrade variable to $connection_upgrade.
# It's used to handle WebSocket connections by upgrading them from HTTP to WebSocket protocol.
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# This server block listens on port 80 (HTTP) and is used for redirecting requests to HTTPS.
server {
    listen 80;
    server_name cloud.<domain>.com; # The domain name of the Nextcloud instance.
    
    # Redirect all HTTP traffic to HTTPS by returning a 301 Moved Permanently response.
    return 301 https://cloud.<domain>.com;
    
    # Logging: Specify the paths for access and error logs.
    access_log /var/log/nginx/nextcloud_access.log;
    error_log /var/log/nginx/nextcloud_error.log;
}

# This server block listens on port 443 (HTTPS) and is configured for secure connections using SSL/TLS.
server {
    listen 443 ssl http2; # Enable SSL/TLS and HTTP/2.
    server_name cloud.<domain>.com; # The domain name of the Nextcloud instance.
    
    # Load TLS certificates: Specify the paths to the SSL certificate and private key.
    ssl_certificate /etc/letsencrypt/live/<domain>.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/<domain>.com/privkey.pem;
    proxy_ssl_trusted_certificate /etc/letsencrypt/live/<domain>.com/chain.pem; # Trusted CA certificates for backend connection.
    
    # Logging: Specify the paths for access and error logs.
    access_log /var/log/nginx/nextcloud_access.log;
    error_log /var/log/nginx/nextcloud_error.log;
    
    # GZIP Compression: Enable GZIP compression for specified MIME types.
    gzip on;
    gzip_vary on;
    gzip_comp_level 4;
    gzip_min_length 256;
    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;
    
    # Security Headers: Add various security headers to enhance security.
    add_header Expect-CT "enforce, max-age=31536000";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; # Enforce HTTPS and prevent MITM attacks.
    
    # Allow upload of large files: Set the maximum allowed size for client request bodies.
    client_max_body_size 10G;
    
    # Cache: Configure caching behavior and headers.
    proxy_cache_key $scheme$proxy_host$request_uri;
    add_header X-Cache-Status $upstream_cache_status;
    client_header_buffer_size 50m;
    client_body_buffer_size 50m;
    client_body_timeout 300s;
    
    # CALDAV and CARDAV Discovery: Redirect .well-known URLs for CalDAV and CardDAV to the correct endpoint.
    rewrite ^/\.well-known/carddav https://cloud.<domain>.com/remote.php/dav/ redirect;
    rewrite ^/\.well-known/caldav https://cloud.<domain>.com/remote.php/dav/ redirect;
    
    # Main location block: Configure proxy settings for passing requests to the backend server.
    location / {
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        proxy_pass http://<server_ip>:8080; # Proxy pass requests to the backend server.
        proxy_set_header Host $host;
        proxy_set_header Upgrade websocket;
        proxy_set_header Connection Upgrade;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Forward the original client IP to the backend.
        proxy_read_timeout 300s; # Set timeout for reading a response from the backend.
        
        # Cache: Enable buffering and specify cache validation.
        proxy_buffering on;
        proxy_cache_valid 200;
        proxy_cache_background_update on;
    }
    
    # Fix webfinger and nodefinger: Redirect requests for webfinger and nodefinger to the index.php script.
    location ^~ /.well-known/ {
        return 301 /index.php$uri;
    }
}
}
